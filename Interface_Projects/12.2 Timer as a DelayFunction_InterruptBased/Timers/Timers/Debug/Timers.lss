
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  0000020e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000271  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016f  00000000  00000000  000004ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001dc  00000000  00000000  0000066e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000078  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f0  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001ec  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

TS08 counter = 0;

int main(void)
{
	Output_init(A,0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 7b 00 	call	0xf6	; 0xf6 <Output_init>
	Output_init(A,1);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 7b 00 	call	0xf6	; 0xf6 <Output_init>
	
	SET_BIT(SREG,7);       // Enable the Global Interrupt
  8c:	8f b7       	in	r24, 0x3f	; 63
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	8f bf       	out	0x3f, r24	; 63
	SET_BIT(TIMSK,TOIE0); // Enable the Overflow Interrupt
  92:	89 b7       	in	r24, 0x39	; 57
  94:	81 60       	ori	r24, 0x01	; 1
  96:	89 bf       	out	0x39, r24	; 57

/* set the mode to be normal mode */
	CLR_BIT(TCCR0,WGM00);
  98:	83 b7       	in	r24, 0x33	; 51
  9a:	8f 7b       	andi	r24, 0xBF	; 191
  9c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM01);
  9e:	83 b7       	in	r24, 0x33	; 51
  a0:	87 7f       	andi	r24, 0xF7	; 247
  a2:	83 bf       	out	0x33, r24	; 51
	
/* set the value of the prescaler to = 1024 */	
	SET_BIT(TCCR0,CS02);
  a4:	83 b7       	in	r24, 0x33	; 51
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
  aa:	83 b7       	in	r24, 0x33	; 51
  ac:	8d 7f       	andi	r24, 0xFD	; 253
  ae:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
  b0:	83 b7       	in	r24, 0x33	; 51
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	83 bf       	out	0x33, r24	; 51

    while(1)
    {
		TOG_BIT(PORTA,1);
  b6:	92 e0       	ldi	r25, 0x02	; 2
		//_delay_ms(100);
		if( counter > 30)
		{
			TOG_BIT(PORTA,0);
  b8:	21 e0       	ldi	r18, 0x01	; 1
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);

    while(1)
    {
		TOG_BIT(PORTA,1);
  ba:	8b b3       	in	r24, 0x1b	; 27
  bc:	89 27       	eor	r24, r25
  be:	8b bb       	out	0x1b, r24	; 27
		//_delay_ms(100);
		if( counter > 30)
  c0:	80 91 60 00 	lds	r24, 0x0060
  c4:	8f 31       	cpi	r24, 0x1F	; 31
  c6:	cc f3       	brlt	.-14     	; 0xba <main+0x3e>
		{
			TOG_BIT(PORTA,0);
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	82 27       	eor	r24, r18
  cc:	8b bb       	out	0x1b, r24	; 27
			counter = 0;
  ce:	10 92 60 00 	sts	0x0060, r1
  d2:	f3 cf       	rjmp	.-26     	; 0xba <main+0x3e>

000000d4 <__vector_11>:
		}
    }
}

ISR(TIMER0_OVF_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
	counter++;
  e0:	80 91 60 00 	lds	r24, 0x0060
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 60 00 	sts	0x0060, r24
	//if( counter == 5)
	//{
		//TOG_BIT(PORTA,0);
		//counter = 0;
	//}
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <Output_init>:
	}	
}

void Output_init(PORTS Port , TU08 pin)
{
	switch(Port)
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	c1 f0       	breq	.+48     	; 0x12a <Output_init+0x34>
  fa:	28 f0       	brcs	.+10     	; 0x106 <Output_init+0x10>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	39 f1       	breq	.+78     	; 0x14e <Output_init+0x58>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	b9 f1       	breq	.+110    	; 0x172 <Output_init+0x7c>
 104:	08 95       	ret
	{
		case A :
			SET_BIT(DDRA,pin);
 106:	2a b3       	in	r18, 0x1a	; 26
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	ac 01       	movw	r20, r24
 10e:	02 c0       	rjmp	.+4      	; 0x114 <Output_init+0x1e>
 110:	44 0f       	add	r20, r20
 112:	55 1f       	adc	r21, r21
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <Output_init+0x1a>
 118:	ba 01       	movw	r22, r20
 11a:	82 2f       	mov	r24, r18
 11c:	84 2b       	or	r24, r20
 11e:	8a bb       	out	0x1a, r24	; 26
			CLR_BIT(PORTA,pin);
 120:	8b b3       	in	r24, 0x1b	; 27
 122:	60 95       	com	r22
 124:	68 23       	and	r22, r24
 126:	6b bb       	out	0x1b, r22	; 27
			break;
 128:	08 95       	ret
		case B :
			SET_BIT(DDRB,pin);
 12a:	27 b3       	in	r18, 0x17	; 23
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	ac 01       	movw	r20, r24
 132:	02 c0       	rjmp	.+4      	; 0x138 <Output_init+0x42>
 134:	44 0f       	add	r20, r20
 136:	55 1f       	adc	r21, r21
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <Output_init+0x3e>
 13c:	ba 01       	movw	r22, r20
 13e:	82 2f       	mov	r24, r18
 140:	84 2b       	or	r24, r20
 142:	87 bb       	out	0x17, r24	; 23
			CLR_BIT(PORTB,pin);
 144:	88 b3       	in	r24, 0x18	; 24
 146:	60 95       	com	r22
 148:	68 23       	and	r22, r24
 14a:	68 bb       	out	0x18, r22	; 24
			break;
 14c:	08 95       	ret
		case C :
			SET_BIT(DDRC,pin);
 14e:	24 b3       	in	r18, 0x14	; 20
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	ac 01       	movw	r20, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <Output_init+0x66>
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <Output_init+0x62>
 160:	ba 01       	movw	r22, r20
 162:	82 2f       	mov	r24, r18
 164:	84 2b       	or	r24, r20
 166:	84 bb       	out	0x14, r24	; 20
			CLR_BIT(PORTC,pin);
 168:	85 b3       	in	r24, 0x15	; 21
 16a:	60 95       	com	r22
 16c:	68 23       	and	r22, r24
 16e:	65 bb       	out	0x15, r22	; 21
			break;
 170:	08 95       	ret
		case D :
			SET_BIT(DDRD,pin);
 172:	21 b3       	in	r18, 0x11	; 17
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <Output_init+0x8a>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <Output_init+0x86>
 184:	ba 01       	movw	r22, r20
 186:	82 2f       	mov	r24, r18
 188:	84 2b       	or	r24, r20
 18a:	81 bb       	out	0x11, r24	; 17
			CLR_BIT(PORTD,pin);
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	60 95       	com	r22
 190:	68 23       	and	r22, r24
 192:	62 bb       	out	0x12, r22	; 18
 194:	08 95       	ret

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
