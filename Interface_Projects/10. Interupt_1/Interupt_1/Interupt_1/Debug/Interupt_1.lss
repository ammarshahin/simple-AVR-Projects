
Interupt_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000139  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000dc  00000000  00000000  000002a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000014b  00000000  00000000  00000383  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ca  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000002f  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000709  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "main.h"

int main(void)
{
	DDRA = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
  70:	11 ba       	out	0x11, r1	; 17
	PORTA = 0x00;
  72:	1b ba       	out	0x1b, r1	; 27
	PORTD = 0xff;
  74:	82 bb       	out	0x12, r24	; 18
	
	MCUCR |= (1<<ISC01);
  76:	85 b7       	in	r24, 0x35	; 53
  78:	82 60       	ori	r24, 0x02	; 2
  7a:	85 bf       	out	0x35, r24	; 53
//	MCUCR |= (1<<ISC11);
	GICR  |= (1<<INT0);
  7c:	8b b7       	in	r24, 0x3b	; 59
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8b bf       	out	0x3b, r24	; 59
	sei();
  82:	78 94       	sei
    while(1)
    {
        TOG_BIT(PORTA,0);
  84:	91 e0       	ldi	r25, 0x01	; 1
  86:	8b b3       	in	r24, 0x1b	; 27
  88:	89 27       	eor	r24, r25
  8a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f e9       	ldi	r18, 0x9F	; 159
  8e:	36 e8       	ldi	r19, 0x86	; 134
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x26>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x30>
  9c:	00 00       	nop
  9e:	f3 cf       	rjmp	.-26     	; 0x86 <main+0x1a>

000000a0 <__vector_1>:
		_delay_ms(500);
    }
}

ISR(INT0_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
	if(GET_BIT(PIND,2) == 0)
  aa:	82 99       	sbic	0x10, 2	; 16
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <__vector_1+0x14>
	{
		CLR_BIT(PORTA,0);
  ae:	d8 98       	cbi	0x1b, 0	; 27
		SET_BIT(PORTA,1);
  b0:	d9 9a       	sbi	0x1b, 1	; 27
		cli();
  b2:	f8 94       	cli
	}
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
