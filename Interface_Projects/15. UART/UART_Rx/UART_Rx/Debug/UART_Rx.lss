
UART_Rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000170  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000090  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003a2  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000231  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000265  00000000  00000000  00000803  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ec  00000000  00000000  00000a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000228  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000223  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000f9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_13>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

#include "main.h"

int main(void)
{
	sei();
  7c:	78 94       	sei
	UART_Init();
  7e:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Init>
	SSD_Init();
  82:	0e 94 4b 00 	call	0x96	; 0x96 <SSD_Init>
    TU08 ch;
    while (1) 
    {
		ch = UART_Recieve();
  86:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART_Recieve>
		if (ch != '\0')
  8a:	88 23       	and	r24, r24
  8c:	e1 f3       	breq	.-8      	; 0x86 <main+0xa>
		{
			SSD_Display_BCD(ch);   
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 51 00 	call	0xa2	; 0xa2 <SSD_Display_BCD>
  94:	f8 cf       	rjmp	.-16     	; 0x86 <main+0xa>

00000096 <SSD_Init>:
 */ 
#include "SSD.h"

void SSD_Init()
{
	SSD_DIR = 0xff;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	87 bb       	out	0x17, r24	; 23
	SSD_PORT = 0x00;
  9a:	18 ba       	out	0x18, r1	; 24
	
	//SSD_DIR = 0x7f;
	#ifdef  SSD_COMMAN_CATHODE
		SSD_PORT=0x3f;
  9c:	8f e3       	ldi	r24, 0x3F	; 63
  9e:	88 bb       	out	0x18, r24	; 24
  a0:	08 95       	ret

000000a2 <SSD_Display_BCD>:
	}
}

void SSD_Display_BCD(TU08 i)
{
	PORTB = i;
  a2:	88 bb       	out	0x18, r24	; 24
  a4:	08 95       	ret

000000a6 <UART_Init>:
void UART_Init()
{
	
		
		/* set baud rate as 9600 and 8MHZ */
		UBRRL=51;
  a6:	83 e3       	ldi	r24, 0x33	; 51
  a8:	89 b9       	out	0x09, r24	; 9
		UBRRH=0;
  aa:	10 bc       	out	0x20, r1	; 32
		
		/* set frame as 8bit mode , 1 stop bit ,no parity */
		UCSRC=0x86; //  0b10000110  set B1,B2(8bit mode) Clear B3( 1 stop bit) Clear B4,B5(no parity)
  ac:	86 e8       	ldi	r24, 0x86	; 134
  ae:	80 bd       	out	0x20, r24	; 32
		
		/* enable RX,TX */
		UCSRB=0x18; // 0b00011000   UCSRB |=(1<<
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	8a b9       	out	0x0a, r24	; 10
  b4:	08 95       	ret

000000b6 <UART_Recieve>:
	//{
	//}
	//ch = UDR;
	//return ch;
	return ch_Recieved;
}
  b6:	80 91 61 00 	lds	r24, 0x0061
  ba:	08 95       	ret

000000bc <__vector_14>:


ISR(USART_UDRE_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
	UDR=ch_Transmited;
  c8:	80 91 60 00 	lds	r24, 0x0060
  cc:	8c b9       	out	0x0c, r24	; 12
}
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <__vector_13>:

ISR(USART_RXC_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
	ch_Recieved = UDR;
  e6:	8c b1       	in	r24, 0x0c	; 12
  e8:	80 93 61 00 	sts	0x0061, r24
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
