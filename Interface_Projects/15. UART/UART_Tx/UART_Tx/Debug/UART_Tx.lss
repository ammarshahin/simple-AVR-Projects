
UART_Tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  0000020c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000569  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002c9  00000000  00000000  00000825  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000348  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000bc  00000000  00000000  00000e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000405  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000217  00000000  00000000  000012f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
 
#include "main.h"

int main(void)
{
	sei(); // Enable Global Interrupt
  7c:	78 94       	sei
    Switch_init(pA,0);
  7e:	60 e0       	ldi	r22, 0x00	; 0
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	0e 94 5c 00 	call	0xb8	; 0xb8 <Switch_init>
	UART_Init();
  86:	0e 94 ac 00 	call	0x158	; 0x158 <UART_Init>
    while (1)
    {
		//if ( GET_BIT(PINA,0) == 0)
		//{
		  
		  UART_Transmit(ch_count);
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 b8 00 	call	0x170	; 0x170 <UART_Transmit>
		  ch_count++;
  90:	c1 e0       	ldi	r28, 0x01	; 1
		  if ( ch_count >= 10)
		  {
			  ch_count = 0;
  92:	d0 e0       	ldi	r29, 0x00	; 0
  94:	01 c0       	rjmp	.+2      	; 0x98 <main+0x1c>
  96:	cd 2f       	mov	r28, r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f e5       	ldi	r18, 0x5F	; 95
  9a:	8a ee       	ldi	r24, 0xEA	; 234
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x22>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x2c>
  a8:	00 00       	nop
    while (1)
    {
		//if ( GET_BIT(PINA,0) == 0)
		//{
		  
		  UART_Transmit(ch_count);
  aa:	8c 2f       	mov	r24, r28
  ac:	0e 94 b8 00 	call	0x170	; 0x170 <UART_Transmit>
		  ch_count++;
  b0:	cf 5f       	subi	r28, 0xFF	; 255
		  if ( ch_count >= 10)
  b2:	ca 30       	cpi	r28, 0x0A	; 10
  b4:	80 f7       	brcc	.-32     	; 0x96 <main+0x1a>
  b6:	f0 cf       	rjmp	.-32     	; 0x98 <main+0x1c>

000000b8 <Switch_init>:

#include "PinConfig.h"

void Switch_init(PORTS Port , TU08 pin)
{
	switch(Port)
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	c1 f0       	breq	.+48     	; 0xec <Switch_init+0x34>
  bc:	28 f0       	brcs	.+10     	; 0xc8 <Switch_init+0x10>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	39 f1       	breq	.+78     	; 0x110 <Switch_init+0x58>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	b9 f1       	breq	.+110    	; 0x134 <Switch_init+0x7c>
  c6:	08 95       	ret
	{
		case pA : 
			CLR_BIT(DDRA,pin);
  c8:	2a b3       	in	r18, 0x1a	; 26
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	ac 01       	movw	r20, r24
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <Switch_init+0x1e>
  d2:	44 0f       	add	r20, r20
  d4:	55 1f       	adc	r21, r21
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <Switch_init+0x1a>
  da:	ba 01       	movw	r22, r20
  dc:	84 2f       	mov	r24, r20
  de:	80 95       	com	r24
  e0:	82 23       	and	r24, r18
  e2:	8a bb       	out	0x1a, r24	; 26
			SET_BIT(PORTA,pin);
  e4:	8b b3       	in	r24, 0x1b	; 27
  e6:	68 2b       	or	r22, r24
  e8:	6b bb       	out	0x1b, r22	; 27
			break;
  ea:	08 95       	ret
		case pB :
			CLR_BIT(DDRB,pin);
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	ac 01       	movw	r20, r24
  f4:	02 c0       	rjmp	.+4      	; 0xfa <Switch_init+0x42>
  f6:	44 0f       	add	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <Switch_init+0x3e>
  fe:	ba 01       	movw	r22, r20
 100:	84 2f       	mov	r24, r20
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	87 bb       	out	0x17, r24	; 23
			SET_BIT(PORTB,pin);
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	68 2b       	or	r22, r24
 10c:	68 bb       	out	0x18, r22	; 24
			break;
 10e:	08 95       	ret
		case pC :
			CLR_BIT(DDRC,pin);
 110:	24 b3       	in	r18, 0x14	; 20
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	ac 01       	movw	r20, r24
 118:	02 c0       	rjmp	.+4      	; 0x11e <Switch_init+0x66>
 11a:	44 0f       	add	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <Switch_init+0x62>
 122:	ba 01       	movw	r22, r20
 124:	84 2f       	mov	r24, r20
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	84 bb       	out	0x14, r24	; 20
			SET_BIT(PORTC,pin);
 12c:	85 b3       	in	r24, 0x15	; 21
 12e:	68 2b       	or	r22, r24
 130:	65 bb       	out	0x15, r22	; 21
			break;
 132:	08 95       	ret
		case pD :
			CLR_BIT(DDRD,pin);
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	ac 01       	movw	r20, r24
 13c:	02 c0       	rjmp	.+4      	; 0x142 <Switch_init+0x8a>
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <Switch_init+0x86>
 146:	ba 01       	movw	r22, r20
 148:	84 2f       	mov	r24, r20
 14a:	80 95       	com	r24
 14c:	82 23       	and	r24, r18
 14e:	81 bb       	out	0x11, r24	; 17
			SET_BIT(PORTD,pin);
 150:	82 b3       	in	r24, 0x12	; 18
 152:	68 2b       	or	r22, r24
 154:	62 bb       	out	0x12, r22	; 18
 156:	08 95       	ret

00000158 <UART_Init>:
TU08 ch_Transmited='\0';

void UART_Init()
{
		
	UBRRL = 51;
 158:	83 e3       	ldi	r24, 0x33	; 51
 15a:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
 15c:	10 bc       	out	0x20, r1	; 32
	
	UCSRA|=(Normal_Speed)|(Multiprocessor_Off);
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	8b b9       	out	0x0b, r24	; 11
	
	
	UCSRB|=(RX_Interrupt_ON)|(TX_Interrupt_ON)
 162:	8a b1       	in	r24, 0x0a	; 10
 164:	88 6f       	ori	r24, 0xF8	; 248
 166:	8a b9       	out	0x0a, r24	; 10
	       |(UDRE_Interrupt_ON)|(Recieve_ON)
		   |(Transmit_ON)|(Off_9Bit)|(Bit9Tx_Off);
	
	
	UCSRC|=(USCRC_Acess)|(Asynchronus_Mode)
 168:	80 b5       	in	r24, 0x20	; 32
 16a:	86 68       	ori	r24, 0x86	; 134
 16c:	80 bd       	out	0x20, r24	; 32
 16e:	08 95       	ret

00000170 <UART_Transmit>:
			|(Mode_8Bit);
}

void UART_Transmit(TU08 ch)
{
	ch_Transmited = ch;
 170:	80 93 60 00 	sts	0x0060, r24
 174:	08 95       	ret

00000176 <__vector_14>:
	return ch_Recieved;
}


ISR(USART_UDRE_vect)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
	UDR = ch_Transmited;
 182:	80 91 60 00 	lds	r24, 0x0060
 186:	8c b9       	out	0x0c, r24	; 12
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
