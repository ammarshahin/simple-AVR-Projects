
KeyBad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000253  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000018e  00000000  00000000  000004bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000259  00000000  00000000  00000649  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  000008a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001fa  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000144  00000000  00000000  00000af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000c3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  64:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <keypad_init>:

#include "keypad.h"

void keypad_init()
{
	DDRA = 0xf0;
  6c:	80 ef       	ldi	r24, 0xF0	; 240
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xff;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	8b bb       	out	0x1b, r24	; 27
  74:	08 95       	ret

00000076 <KeyPad_getpressedkey>:
}

int KeyPad_getpressedkey(void)
{
  76:	84 e0       	ldi	r24, 0x04	; 4
  78:	90 e0       	ldi	r25, 0x00	; 0
	TU08 col_index = 0; // counter  For loop
	TU08 rows_val = 0; // get the value of rows in this variable
	TU08 key = NO_PRESSED_KEY; // 0xff

	for(col_index = 0 ; col_index < 4 ; col_index++ )
  7a:	60 e0       	ldi	r22, 0x00	; 0
	{
		/* loop1: C0 to check (7,4,1,O)*/
		//KEYPAD_PORT=(KEYPAD_PORT | 0xf0);//check c0 c1 c2 c3 are 1111

		CLR_BIT(KEYPAD_PORT,(col_index+4));//clear col c0 on bit4  c1 on bit5 CLR_BIT(PORTA,4)
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	50 e0       	ldi	r21, 0x00	; 0
  80:	7b b3       	in	r23, 0x1b	; 27
  82:	9a 01       	movw	r18, r20
  84:	08 2e       	mov	r0, r24
  86:	02 c0       	rjmp	.+4      	; 0x8c <KeyPad_getpressedkey+0x16>
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	0a 94       	dec	r0
  8e:	e2 f7       	brpl	.-8      	; 0x88 <KeyPad_getpressedkey+0x12>
  90:	e2 2f       	mov	r30, r18
  92:	e0 95       	com	r30
  94:	7e 23       	and	r23, r30
  96:	7b bb       	out	0x1b, r23	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	e9 ef       	ldi	r30, 0xF9	; 249
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <KeyPad_getpressedkey+0x26>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <KeyPad_getpressedkey+0x2c>
  a2:	00 00       	nop

		_delay_ms(1);//delay

		rows_val= GET_LOWER_NIBBLE(KEYPAD_ROWS); // KEYPAD_ROWS == PINA
  a4:	79 b3       	in	r23, 0x19	; 25
  a6:	7f 70       	andi	r23, 0x0F	; 15

		if(rows_val != 0x0f) // not equal 1111
  a8:	7f 30       	cpi	r23, 0x0F	; 15
  aa:	29 f0       	breq	.+10     	; 0xb6 <KeyPad_getpressedkey+0x40>
		{
			while((GET_LOWER_NIBBLE(KEYPAD_ROWS)) != 0x0f); // single pressing
  ac:	89 b3       	in	r24, 0x19	; 25
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	8f 30       	cpi	r24, 0x0F	; 15
  b2:	e1 f7       	brne	.-8      	; 0xac <KeyPad_getpressedkey+0x36>
  b4:	08 c0       	rjmp	.+16     	; 0xc6 <KeyPad_getpressedkey+0x50>
			break;
		}
		SET_BIT(KEYPAD_PORT,(col_index+4));//set col
  b6:	3b b3       	in	r19, 0x1b	; 27
  b8:	23 2b       	or	r18, r19
  ba:	2b bb       	out	0x1b, r18	; 27
{
	TU08 col_index = 0; // counter  For loop
	TU08 rows_val = 0; // get the value of rows in this variable
	TU08 key = NO_PRESSED_KEY; // 0xff

	for(col_index = 0 ; col_index < 4 ; col_index++ )
  bc:	6f 5f       	subi	r22, 0xFF	; 255
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	64 30       	cpi	r22, 0x04	; 4
  c2:	f1 f6       	brne	.-68     	; 0x80 <KeyPad_getpressedkey+0xa>
  c4:	57 c0       	rjmp	.+174    	; 0x174 <KeyPad_getpressedkey+0xfe>
			break;
		}
		SET_BIT(KEYPAD_PORT,(col_index+4));//set col
	}

	if(col_index == 4)
  c6:	64 30       	cpi	r22, 0x04	; 4
  c8:	09 f4       	brne	.+2      	; 0xcc <KeyPad_getpressedkey+0x56>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <KeyPad_getpressedkey+0x104>
	{
		return NO_PRESSED_KEY;
	}
	else
	{
		switch(col_index)
  cc:	61 30       	cpi	r22, 0x01	; 1
  ce:	c1 f0       	breq	.+48     	; 0x100 <KeyPad_getpressedkey+0x8a>
  d0:	28 f0       	brcs	.+10     	; 0xdc <KeyPad_getpressedkey+0x66>
  d2:	62 30       	cpi	r22, 0x02	; 2
  d4:	39 f1       	breq	.+78     	; 0x124 <KeyPad_getpressedkey+0xae>
  d6:	63 30       	cpi	r22, 0x03	; 3
  d8:	b9 f1       	breq	.+110    	; 0x148 <KeyPad_getpressedkey+0xd2>
  da:	41 c0       	rjmp	.+130    	; 0x15e <KeyPad_getpressedkey+0xe8>
		{
			// Col_index = 0
			case 0:
			switch(rows_val)
  dc:	7b 30       	cpi	r23, 0x0B	; 11
  de:	61 f0       	breq	.+24     	; 0xf8 <KeyPad_getpressedkey+0x82>
  e0:	18 f4       	brcc	.+6      	; 0xe8 <KeyPad_getpressedkey+0x72>
  e2:	77 30       	cpi	r23, 0x07	; 7
  e4:	59 f0       	breq	.+22     	; 0xfc <KeyPad_getpressedkey+0x86>
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <KeyPad_getpressedkey+0x7a>
  e8:	7d 30       	cpi	r23, 0x0D	; 13
  ea:	21 f0       	breq	.+8      	; 0xf4 <KeyPad_getpressedkey+0x7e>
  ec:	7e 30       	cpi	r23, 0x0E	; 14
  ee:	c9 f1       	breq	.+114    	; 0x162 <KeyPad_getpressedkey+0xec>

int KeyPad_getpressedkey(void)
{
	TU08 col_index = 0; // counter  For loop
	TU08 rows_val = 0; // get the value of rows in this variable
	TU08 key = NO_PRESSED_KEY; // 0xff
  f0:	84 e6       	ldi	r24, 0x64	; 100
  f2:	3e c0       	rjmp	.+124    	; 0x170 <KeyPad_getpressedkey+0xfa>
			{
				case 0x0E:   // 0000 1110
				key = 7;
				break;
				case 0x0D:  //  0000 1101
				key = 4;
  f4:	84 e0       	ldi	r24, 0x04	; 4
				break;
  f6:	3c c0       	rjmp	.+120    	; 0x170 <KeyPad_getpressedkey+0xfa>
				case 0x0B:  //  0000 1011
				key = 1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
				break;
  fa:	3a c0       	rjmp	.+116    	; 0x170 <KeyPad_getpressedkey+0xfa>
				case 0x07:   // 0000 0111
				key = 0;
  fc:	80 e0       	ldi	r24, 0x00	; 0
				break;
  fe:	38 c0       	rjmp	.+112    	; 0x170 <KeyPad_getpressedkey+0xfa>
			}
			break;

			// Col_index = 1
			case 1:
			switch(rows_val)
 100:	7b 30       	cpi	r23, 0x0B	; 11
 102:	61 f0       	breq	.+24     	; 0x11c <KeyPad_getpressedkey+0xa6>
 104:	18 f4       	brcc	.+6      	; 0x10c <KeyPad_getpressedkey+0x96>
 106:	77 30       	cpi	r23, 0x07	; 7
 108:	59 f0       	breq	.+22     	; 0x120 <KeyPad_getpressedkey+0xaa>
 10a:	04 c0       	rjmp	.+8      	; 0x114 <KeyPad_getpressedkey+0x9e>
 10c:	7d 30       	cpi	r23, 0x0D	; 13
 10e:	21 f0       	breq	.+8      	; 0x118 <KeyPad_getpressedkey+0xa2>
 110:	7e 30       	cpi	r23, 0x0E	; 14
 112:	49 f1       	breq	.+82     	; 0x166 <KeyPad_getpressedkey+0xf0>

int KeyPad_getpressedkey(void)
{
	TU08 col_index = 0; // counter  For loop
	TU08 rows_val = 0; // get the value of rows in this variable
	TU08 key = NO_PRESSED_KEY; // 0xff
 114:	84 e6       	ldi	r24, 0x64	; 100
 116:	2c c0       	rjmp	.+88     	; 0x170 <KeyPad_getpressedkey+0xfa>
			{
				case 0x0E:   // 1110
				key = 8;
				break;
				case 0x0D:   //1101
				key = 5;
 118:	85 e0       	ldi	r24, 0x05	; 5
				break;
 11a:	2a c0       	rjmp	.+84     	; 0x170 <KeyPad_getpressedkey+0xfa>
				case 0x0B:  // 1011
				key = 2;
 11c:	82 e0       	ldi	r24, 0x02	; 2
				break;
 11e:	28 c0       	rjmp	.+80     	; 0x170 <KeyPad_getpressedkey+0xfa>
				case 0x07:  // 0111
				key = 0;
 120:	80 e0       	ldi	r24, 0x00	; 0
				break;
 122:	26 c0       	rjmp	.+76     	; 0x170 <KeyPad_getpressedkey+0xfa>
			}
			break;
			
			// Col2
			case 2:
			switch(rows_val)
 124:	7b 30       	cpi	r23, 0x0B	; 11
 126:	61 f0       	breq	.+24     	; 0x140 <KeyPad_getpressedkey+0xca>
 128:	18 f4       	brcc	.+6      	; 0x130 <KeyPad_getpressedkey+0xba>
 12a:	77 30       	cpi	r23, 0x07	; 7
 12c:	59 f0       	breq	.+22     	; 0x144 <KeyPad_getpressedkey+0xce>
 12e:	04 c0       	rjmp	.+8      	; 0x138 <KeyPad_getpressedkey+0xc2>
 130:	7d 30       	cpi	r23, 0x0D	; 13
 132:	21 f0       	breq	.+8      	; 0x13c <KeyPad_getpressedkey+0xc6>
 134:	7e 30       	cpi	r23, 0x0E	; 14
 136:	c9 f0       	breq	.+50     	; 0x16a <KeyPad_getpressedkey+0xf4>

int KeyPad_getpressedkey(void)
{
	TU08 col_index = 0; // counter  For loop
	TU08 rows_val = 0; // get the value of rows in this variable
	TU08 key = NO_PRESSED_KEY; // 0xff
 138:	84 e6       	ldi	r24, 0x64	; 100
 13a:	1a c0       	rjmp	.+52     	; 0x170 <KeyPad_getpressedkey+0xfa>
			{
				case 0x0E:  // 1110
				key = 9;
				break;
				case 0x0D:  // 1101
				key = 6;
 13c:	86 e0       	ldi	r24, 0x06	; 6
				break;
 13e:	18 c0       	rjmp	.+48     	; 0x170 <KeyPad_getpressedkey+0xfa>
				case 0x0B:  // 1011
				key = 3;
 140:	83 e0       	ldi	r24, 0x03	; 3
				break;
 142:	16 c0       	rjmp	.+44     	; 0x170 <KeyPad_getpressedkey+0xfa>
				case 0x07:  // 0111
				key = 0;
 144:	80 e0       	ldi	r24, 0x00	; 0
				break;
 146:	14 c0       	rjmp	.+40     	; 0x170 <KeyPad_getpressedkey+0xfa>
			}
			break;
			
			// Col3
			case 3:
			switch(rows_val)
 148:	7b 30       	cpi	r23, 0x0B	; 11
 14a:	89 f0       	breq	.+34     	; 0x16e <KeyPad_getpressedkey+0xf8>
 14c:	18 f4       	brcc	.+6      	; 0x154 <KeyPad_getpressedkey+0xde>
 14e:	77 30       	cpi	r23, 0x07	; 7
 150:	71 f0       	breq	.+28     	; 0x16e <KeyPad_getpressedkey+0xf8>
 152:	03 c0       	rjmp	.+6      	; 0x15a <KeyPad_getpressedkey+0xe4>
 154:	7d 50       	subi	r23, 0x0D	; 13
 156:	72 30       	cpi	r23, 0x02	; 2
 158:	50 f0       	brcs	.+20     	; 0x16e <KeyPad_getpressedkey+0xf8>

int KeyPad_getpressedkey(void)
{
	TU08 col_index = 0; // counter  For loop
	TU08 rows_val = 0; // get the value of rows in this variable
	TU08 key = NO_PRESSED_KEY; // 0xff
 15a:	84 e6       	ldi	r24, 0x64	; 100
 15c:	09 c0       	rjmp	.+18     	; 0x170 <KeyPad_getpressedkey+0xfa>
 15e:	84 e6       	ldi	r24, 0x64	; 100
 160:	07 c0       	rjmp	.+14     	; 0x170 <KeyPad_getpressedkey+0xfa>
			// Col_index = 0
			case 0:
			switch(rows_val)
			{
				case 0x0E:   // 0000 1110
				key = 7;
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	05 c0       	rjmp	.+10     	; 0x170 <KeyPad_getpressedkey+0xfa>
			// Col_index = 1
			case 1:
			switch(rows_val)
			{
				case 0x0E:   // 1110
				key = 8;
 166:	88 e0       	ldi	r24, 0x08	; 8
 168:	03 c0       	rjmp	.+6      	; 0x170 <KeyPad_getpressedkey+0xfa>
			// Col2
			case 2:
			switch(rows_val)
			{
				case 0x0E:  // 1110
				key = 9;
 16a:	89 e0       	ldi	r24, 0x09	; 9
 16c:	01 c0       	rjmp	.+2      	; 0x170 <KeyPad_getpressedkey+0xfa>
			// Col3
			case 3:
			switch(rows_val)
			{
				case 0x0E:
				key = 0;
 16e:	80 e0       	ldi	r24, 0x00	; 0
			
			default:
			break;
		}
	}
	return key;
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret
		SET_BIT(KEYPAD_PORT,(col_index+4));//set col
	}

	if(col_index == 4)
	{
		return NO_PRESSED_KEY;
 174:	84 e6       	ldi	r24, 0x64	; 100
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	08 95       	ret
 17a:	84 e6       	ldi	r24, 0x64	; 100
 17c:	90 e0       	ldi	r25, 0x00	; 0
			default:
			break;
		}
	}
	return key;
 17e:	08 95       	ret

00000180 <main>:
#include "main.h"

int main(void)
{
	int key;
	DDRC=0xff;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	84 bb       	out	0x14, r24	; 20
	PORTA=0x00;
 184:	1b ba       	out	0x1b, r1	; 27
	
	keypad_init();
 186:	0e 94 36 00 	call	0x6c	; 0x6c <keypad_init>

	while(1)
	{
		key = KeyPad_getpressedkey();
 18a:	0e 94 3b 00 	call	0x76	; 0x76 <KeyPad_getpressedkey>
	//	display_BCD(key);
	 
	if (key != NO_PRESSED_KEY)
 18e:	84 36       	cpi	r24, 0x64	; 100
 190:	91 05       	cpc	r25, r1
 192:	d9 f3       	breq	.-10     	; 0x18a <main+0xa>
		PORTC = key;
 194:	85 bb       	out	0x15, r24	; 21
 196:	f9 cf       	rjmp	.-14     	; 0x18a <main+0xa>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
