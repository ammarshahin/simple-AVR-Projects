
H_Bridge motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000016f  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d7  00000000  00000000  000002f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000017a  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001d5  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000100  00000000  00000000  0000073d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000083d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "main.h"

int main()
{
	TU08 flag = 1;
	DDRA = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;
  70:	17 ba       	out	0x17, r1	; 23
	PORTA = 0x00;
  72:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0xff;
  74:	88 bb       	out	0x18, r24	; 24

#include "main.h"

int main()
{
	TU08 flag = 1;
  76:	81 e0       	ldi	r24, 0x01	; 1
		}
		else if((GET_BIT(PINB,1) == 1) && (GET_BIT(PINB,0) == 1))
		{
			CLR_BIT(PORTA,0);
			CLR_BIT(PORTA,1);
			flag = 1;
  78:	21 e0       	ldi	r18, 0x01	; 1
		}
		else if(flag  && (GET_BIT(PINB,1) == 0) )
		{
			CLR_BIT(PORTA,0);
			SET_BIT(PORTA,1);
			flag = 0;
  7a:	90 e0       	ldi	r25, 0x00	; 0
	PORTB = 0xff;

	while(1)
	{
	
		if((GET_BIT(PINB,1) == 0) && (GET_BIT(PINB,0) == 0))
  7c:	b1 99       	sbic	0x16, 1	; 22
  7e:	06 c0       	rjmp	.+12     	; 0x8c <main+0x20>
  80:	b0 99       	sbic	0x16, 0	; 22
  82:	04 c0       	rjmp	.+8      	; 0x8c <main+0x20>
		{
			CLR_BIT(PORTA,0);
  84:	d8 98       	cbi	0x1b, 0	; 27
			CLR_BIT(PORTA,1);
  86:	d9 98       	cbi	0x1b, 1	; 27
			flag =0;
  88:	89 2f       	mov	r24, r25
  8a:	f8 cf       	rjmp	.-16     	; 0x7c <main+0x10>
		}
		else if(flag  && (GET_BIT(PINB,0) == 0))
  8c:	88 23       	and	r24, r24
  8e:	f1 f0       	breq	.+60     	; 0xcc <main+0x60>
  90:	b0 99       	sbic	0x16, 0	; 22
  92:	0d c0       	rjmp	.+26     	; 0xae <main+0x42>
		{
			CLR_BIT(PORTA,1);
  94:	d9 98       	cbi	0x1b, 1	; 27
			SET_BIT(PORTA,0);
  96:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	3f e3       	ldi	r19, 0x3F	; 63
  9a:	4d e0       	ldi	r20, 0x0D	; 13
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	31 50       	subi	r19, 0x01	; 1
  a0:	40 40       	sbci	r20, 0x00	; 0
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x32>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
			flag = 0;
  aa:	89 2f       	mov	r24, r25
  ac:	e7 cf       	rjmp	.-50     	; 0x7c <main+0x10>
			_delay_ms(1000);
		}
		else if(flag  && (GET_BIT(PINB,1) == 0) )
  ae:	b1 99       	sbic	0x16, 1	; 22
  b0:	0d c0       	rjmp	.+26     	; 0xcc <main+0x60>
		{
			CLR_BIT(PORTA,0);
  b2:	d8 98       	cbi	0x1b, 0	; 27
			SET_BIT(PORTA,1);
  b4:	d9 9a       	sbi	0x1b, 1	; 27
  b6:	3f e3       	ldi	r19, 0x3F	; 63
  b8:	4d e0       	ldi	r20, 0x0D	; 13
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	31 50       	subi	r19, 0x01	; 1
  be:	40 40       	sbci	r20, 0x00	; 0
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x50>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x5a>
  c6:	00 00       	nop
			flag = 0;
  c8:	89 2f       	mov	r24, r25
  ca:	d8 cf       	rjmp	.-80     	; 0x7c <main+0x10>
			_delay_ms(1000);
		}
		else if((GET_BIT(PINB,1) == 1) && (GET_BIT(PINB,0) == 1))
  cc:	b1 9b       	sbis	0x16, 1	; 22
  ce:	d6 cf       	rjmp	.-84     	; 0x7c <main+0x10>
  d0:	b0 9b       	sbis	0x16, 0	; 22
  d2:	d4 cf       	rjmp	.-88     	; 0x7c <main+0x10>
		{
			CLR_BIT(PORTA,0);
  d4:	d8 98       	cbi	0x1b, 0	; 27
			CLR_BIT(PORTA,1);
  d6:	d9 98       	cbi	0x1b, 1	; 27
			flag = 1;
  d8:	82 2f       	mov	r24, r18
  da:	d0 cf       	rjmp	.-96     	; 0x7c <main+0x10>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
