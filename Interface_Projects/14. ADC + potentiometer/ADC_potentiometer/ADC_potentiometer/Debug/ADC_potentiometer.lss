
ADC_potentiometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000002fc  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a0  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000949  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000043d  00000000  00000000  00000d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004a2  00000000  00000000  00001152  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  000015f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000318  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000044a  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  00001eb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  8a:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
#include "ADC.h"

void ADC_init()
{
/* Enable the ADC peripheral */
	SET_BIT(ADCSRA,ADEN);    
  92:	37 9a       	sbi	0x06, 7	; 6
	
/* Set the prescaler value to 128 */
	SET_BIT(ADCSRA,ADPS2);    
  94:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
  96:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,ADPS0);
  98:	30 9a       	sbi	0x06, 0	; 6
	
	SET_BIT(ADCSRA,ADIE);	// Enable the ADC Interrupt
  9a:	33 9a       	sbi	0x06, 3	; 6
	SET_BIT(SREG,7);       // Enable the Global Interrupt
  9c:	8f b7       	in	r24, 0x3f	; 63
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	8f bf       	out	0x3f, r24	; 63
  a2:	08 95       	ret

000000a4 <ADC_read>:


TU16 ADC_read(TU08 ch)
{
	ch &= 0b00000111; // channel must be b/w 0 to 7
	ADMUX = (ADMUX & 0xF0) | ch; // selecting channel
  a4:	97 b1       	in	r25, 0x07	; 7
}


TU16 ADC_read(TU08 ch)
{
	ch &= 0b00000111; // channel must be b/w 0 to 7
  a6:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF0) | ch; // selecting channel
  a8:	90 7f       	andi	r25, 0xF0	; 240
  aa:	98 2b       	or	r25, r24
  ac:	97 b9       	out	0x07, r25	; 7
	
	SET_BIT(ADCSRA,ADSC);  // start conversion
  ae:	36 9a       	sbi	0x06, 6	; 6
	
	while( GET_BIT(ADCSRA,ADIF) == 0); // waiting for ADIF, conversion complete
  b0:	34 9b       	sbis	0x06, 4	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <ADC_read+0xc>
	
	SET_BIT(ADCSRA,ADIF); // clearing of ADIF, it is done by writing 1 to it
  b4:	34 9a       	sbi	0x06, 4	; 6
	
	return ADC;
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	95 b1       	in	r25, 0x05	; 5
}
  ba:	08 95       	ret

000000bc <LCD_send_comand>:
	float val= (number>0) ? number : -number;
	int num = val;
	float fraction = val-num;
	int frac = fraction * 10000;
	sprintf(str, "%s%d.%d",sign, num, frac);
	LCD_Display_String(str);
  bc:	aa 98       	cbi	0x15, 2	; 21
  be:	a9 98       	cbi	0x15, 1	; 21
  c0:	e9 ef       	ldi	r30, 0xF9	; 249
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_send_comand+0x8>
  c8:	00 c0       	rjmp	.+0      	; 0xca <LCD_send_comand+0xe>
}
  ca:	00 00       	nop
  cc:	a8 9a       	sbi	0x15, 0	; 21
  ce:	e9 ef       	ldi	r30, 0xF9	; 249
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_send_comand+0x16>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_send_comand+0x1c>
  d8:	00 00       	nop
  da:	82 bb       	out	0x12, r24	; 18
  dc:	89 ef       	ldi	r24, 0xF9	; 249
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_send_comand+0x24>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_send_comand+0x2a>
  e6:	00 00       	nop
  e8:	a8 98       	cbi	0x15, 0	; 21
  ea:	e9 ef       	ldi	r30, 0xF9	; 249
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	31 97       	sbiw	r30, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_send_comand+0x32>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_send_comand+0x38>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <LCD_init>:


void LCD_init()
{
	#ifdef EIGHT_BIT_MODE
		data_dir |= data_port_init_8bit;
  f8:	81 b3       	in	r24, 0x11	; 17
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	81 bb       	out	0x11, r24	; 17
		control_dir |= (1<<RS)|(1<<RW)|(1<<EN);
  fe:	84 b3       	in	r24, 0x14	; 20
 100:	87 60       	ori	r24, 0x07	; 7
 102:	84 bb       	out	0x14, r24	; 20
		LCD_send_comand(SET_MODE_8bit);
 104:	88 e3       	ldi	r24, 0x38	; 56
 106:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_send_comand>
		LCD_send_comand(clear_lcd);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_send_comand>
		LCD_send_comand(cursor_off);
 110:	8c e0       	ldi	r24, 0x0C	; 12
 112:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_send_comand>
 116:	08 95       	ret

00000118 <LCD_Display>:
	#endif
}


void LCD_Display(char Data)
{
 118:	cf 93       	push	r28
 11a:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
		counter++;
 11c:	90 91 60 00 	lds	r25, 0x0060
 120:	9f 5f       	subi	r25, 0xFF	; 255
 122:	90 93 60 00 	sts	0x0060, r25
		if(counter == 17)
 126:	91 31       	cpi	r25, 0x11	; 17
 128:	19 f4       	brne	.+6      	; 0x130 <LCD_Display+0x18>
			LCD_send_comand(force_cursor_begin_second_line);
 12a:	80 ec       	ldi	r24, 0xC0	; 192
 12c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_send_comand>
		if(counter==33)
 130:	80 91 60 00 	lds	r24, 0x0060
 134:	81 32       	cpi	r24, 0x21	; 33
 136:	29 f4       	brne	.+10     	; 0x142 <LCD_Display+0x2a>
		{
			counter=0;
 138:	10 92 60 00 	sts	0x0060, r1
			LCD_send_comand(force_cursor_begin_first_line);
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_send_comand>
		}
		SET_BIT(control_port,RS);			
 142:	aa 9a       	sbi	0x15, 2	; 21
		CLR_BIT(control_port,RW);			
 144:	a9 98       	cbi	0x15, 1	; 21
 146:	89 ef       	ldi	r24, 0xF9	; 249
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_Display+0x32>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_Display+0x38>
 150:	00 00       	nop
		_delay_ms(1);						
		SET_BIT(control_port,EN);			
 152:	a8 9a       	sbi	0x15, 0	; 21
 154:	89 ef       	ldi	r24, 0xF9	; 249
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_Display+0x40>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_Display+0x46>
 15e:	00 00       	nop
		_delay_ms(1);						
		data_port=Data;				        
 160:	c2 bb       	out	0x12, r28	; 18
 162:	89 ef       	ldi	r24, 0xF9	; 249
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Display+0x4e>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Display+0x54>
 16c:	00 00       	nop
		_delay_ms(1);						
		CLR_BIT(control_port,EN);			
 16e:	a8 98       	cbi	0x15, 0	; 21
 170:	89 ef       	ldi	r24, 0xF9	; 249
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_Display+0x5c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_Display+0x62>
 17a:	00 00       	nop
		SET_BIT(control_port,EN);
		_delay_ms(2);
		CLR_BIT(control_port,EN);
		_delay_ms(2);
	#endif				
}
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <LCD_Display_String>:
	 }
	}
}

void LCD_Display_String(char arr[])
{
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ec 01       	movw	r28, r24
	TU08 a = 0;
	while (arr[a]!='\0')
 188:	88 81       	ld	r24, Y
 18a:	88 23       	and	r24, r24
 18c:	51 f0       	breq	.+20     	; 0x1a2 <LCD_Display_String+0x22>
	}
}

void LCD_Display_String(char arr[])
{
	TU08 a = 0;
 18e:	10 e0       	ldi	r17, 0x00	; 0
	while (arr[a]!='\0')
	{
		LCD_Display(arr[a]);
 190:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Display>
		a ++;
 194:	1f 5f       	subi	r17, 0xFF	; 255
}

void LCD_Display_String(char arr[])
{
	TU08 a = 0;
	while (arr[a]!='\0')
 196:	fe 01       	movw	r30, r28
 198:	e1 0f       	add	r30, r17
 19a:	f1 1d       	adc	r31, r1
 19c:	80 81       	ld	r24, Z
 19e:	81 11       	cpse	r24, r1
 1a0:	f7 cf       	rjmp	.-18     	; 0x190 <LCD_Display_String+0x10>
	{
		LCD_Display(arr[a]);
		a ++;
	}
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	08 95       	ret

000001aa <LCD_Display_Number>:


void LCD_Display_Number(TU16 number)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	27 97       	sbiw	r28, 0x07	; 7
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1be:	4a e0       	ldi	r20, 0x0A	; 10
 1c0:	be 01       	movw	r22, r28
 1c2:	6f 5f       	subi	r22, 0xFF	; 255
 1c4:	7f 4f       	sbci	r23, 0xFF	; 255
 1c6:	0e 94 0d 01 	call	0x21a	; 0x21a <__itoa_ncheck>
	char array[7];
	itoa(number , array,10);
	LCD_Display_String(array);
 1ca:	ce 01       	movw	r24, r28
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Display_String>
}
 1d2:	27 96       	adiw	r28, 0x07	; 7
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <LCD_Clear>:
	LCD_Display_String(str);
}

void LCD_Clear()
{
	LCD_send_comand(clear_lcd);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_send_comand>
	counter=0;
 1ea:	10 92 60 00 	sts	0x0060, r1
 1ee:	08 95       	ret

000001f0 <main>:

int main(void)
{
	TU16 x = 0;
	
	ADC_init();
 1f0:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	LCD_init();
 1f4:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_init>
	
    while(1)
    {
		x = ADC_read(0);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC_read>
		LCD_Display_Number(x);
 1fe:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Display_Number>
 202:	2f e5       	ldi	r18, 0x5F	; 95
 204:	8a ee       	ldi	r24, 0xEA	; 234
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x18>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x22>
 212:	00 00       	nop
		_delay_ms(300);
		LCD_Clear();
 214:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_Clear>
 218:	ef cf       	rjmp	.-34     	; 0x1f8 <main+0x8>

0000021a <__itoa_ncheck>:
 21a:	bb 27       	eor	r27, r27
 21c:	4a 30       	cpi	r20, 0x0A	; 10
 21e:	31 f4       	brne	.+12     	; 0x22c <__itoa_ncheck+0x12>
 220:	99 23       	and	r25, r25
 222:	22 f4       	brpl	.+8      	; 0x22c <__itoa_ncheck+0x12>
 224:	bd e2       	ldi	r27, 0x2D	; 45
 226:	90 95       	com	r25
 228:	81 95       	neg	r24
 22a:	9f 4f       	sbci	r25, 0xFF	; 255
 22c:	0c 94 19 01 	jmp	0x232	; 0x232 <__utoa_common>

00000230 <__utoa_ncheck>:
 230:	bb 27       	eor	r27, r27

00000232 <__utoa_common>:
 232:	fb 01       	movw	r30, r22
 234:	55 27       	eor	r21, r21
 236:	aa 27       	eor	r26, r26
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	aa 1f       	adc	r26, r26
 23e:	a4 17       	cp	r26, r20
 240:	10 f0       	brcs	.+4      	; 0x246 <__utoa_common+0x14>
 242:	a4 1b       	sub	r26, r20
 244:	83 95       	inc	r24
 246:	50 51       	subi	r21, 0x10	; 16
 248:	b9 f7       	brne	.-18     	; 0x238 <__utoa_common+0x6>
 24a:	a0 5d       	subi	r26, 0xD0	; 208
 24c:	aa 33       	cpi	r26, 0x3A	; 58
 24e:	08 f0       	brcs	.+2      	; 0x252 <__utoa_common+0x20>
 250:	a9 5d       	subi	r26, 0xD9	; 217
 252:	a1 93       	st	Z+, r26
 254:	00 97       	sbiw	r24, 0x00	; 0
 256:	79 f7       	brne	.-34     	; 0x236 <__utoa_common+0x4>
 258:	b1 11       	cpse	r27, r1
 25a:	b1 93       	st	Z+, r27
 25c:	11 92       	st	Z+, r1
 25e:	cb 01       	movw	r24, r22
 260:	0c 94 32 01 	jmp	0x264	; 0x264 <strrev>

00000264 <strrev>:
 264:	dc 01       	movw	r26, r24
 266:	fc 01       	movw	r30, r24
 268:	67 2f       	mov	r22, r23
 26a:	71 91       	ld	r23, Z+
 26c:	77 23       	and	r23, r23
 26e:	e1 f7       	brne	.-8      	; 0x268 <strrev+0x4>
 270:	32 97       	sbiw	r30, 0x02	; 2
 272:	04 c0       	rjmp	.+8      	; 0x27c <strrev+0x18>
 274:	7c 91       	ld	r23, X
 276:	6d 93       	st	X+, r22
 278:	70 83       	st	Z, r23
 27a:	62 91       	ld	r22, -Z
 27c:	ae 17       	cp	r26, r30
 27e:	bf 07       	cpc	r27, r31
 280:	c8 f3       	brcs	.-14     	; 0x274 <strrev+0x10>
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
