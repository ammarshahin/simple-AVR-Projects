
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  0000014a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000c0  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000064  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000cd  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018f  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000053f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
TS08 counter = 0;

int main(void)
{
	
	SET_BIT(DDRA,0);
  7c:	d0 9a       	sbi	0x1a, 0	; 26
	CLR_BIT(PORTA,0);
  7e:	d8 98       	cbi	0x1b, 0	; 27
	
	SET_BIT(TIMSK,TOIE0); // Enable the Overflow Interrupt
  80:	89 b7       	in	r24, 0x39	; 57
  82:	81 60       	ori	r24, 0x01	; 1
  84:	89 bf       	out	0x39, r24	; 57
	CLR_BIT(TIMSK,OCIE0); // Disable the Compare match Interrupt
  86:	89 b7       	in	r24, 0x39	; 57
  88:	8d 7f       	andi	r24, 0xFD	; 253
  8a:	89 bf       	out	0x39, r24	; 57
	
/* set the mode to be normal mode */
	CLR_BIT(TCCR0,WGM00);
  8c:	83 b7       	in	r24, 0x33	; 51
  8e:	8f 7b       	andi	r24, 0xBF	; 191
  90:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM01);
  92:	83 b7       	in	r24, 0x33	; 51
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	83 bf       	out	0x33, r24	; 51
	
/* set the value of the prescaler to = 1024 */	
	SET_BIT(TCCR0,CS02);
  98:	83 b7       	in	r24, 0x33	; 51
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
  9e:	83 b7       	in	r24, 0x33	; 51
  a0:	8d 7f       	andi	r24, 0xFD	; 253
  a2:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
  a4:	83 b7       	in	r24, 0x33	; 51
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	83 bf       	out	0x33, r24	; 51

    while(1)
    {
		 while (!(TIFR & 0x01));
		 counter++;
		 TIFR=0x01;			//clear timer1 overflow flag
  aa:	91 e0       	ldi	r25, 0x01	; 1
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);

    while(1)
    {
		 while (!(TIFR & 0x01));
  ac:	08 b6       	in	r0, 0x38	; 56
  ae:	00 fe       	sbrs	r0, 0
  b0:	fd cf       	rjmp	.-6      	; 0xac <main+0x30>
		 counter++;
  b2:	80 91 60 00 	lds	r24, 0x0060
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	80 93 60 00 	sts	0x0060, r24
		 TIFR=0x01;			//clear timer1 overflow flag
  bc:	98 bf       	out	0x38, r25	; 56
		 
		if( counter == 30){
  be:	80 91 60 00 	lds	r24, 0x0060
  c2:	8e 31       	cpi	r24, 0x1E	; 30
  c4:	99 f7       	brne	.-26     	; 0xac <main+0x30>
			TOG_BIT(PORTA,0);
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	89 27       	eor	r24, r25
  ca:	8b bb       	out	0x1b, r24	; 27
			counter = 0;
  cc:	10 92 60 00 	sts	0x0060, r1
  d0:	ed cf       	rjmp	.-38     	; 0xac <main+0x30>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
